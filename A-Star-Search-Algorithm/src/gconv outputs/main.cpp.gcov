        -:    0:Source:main.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:using std::cin;
        -:    3:using std::cout;
        -:    4:using std::endl;
        -:    5:#include "AStarSearchAlgorithm.hpp"
        -:    6:using namespace AStarSearchAlgorithm;
        -:    7:
function main called 1 returned 100% blocks executed 70%
        1:    8:int main() {
        2:    9:    string boardFile;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:   10:    bool emptyFile = false;
        2:   11:    vector<vector<State>> board;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:   12:    do {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   13:        cout << "Enter the path to the text file: ";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   14:        cin >> boardFile;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   15:        cout << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:        board = ReadBoardFile(boardFile);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 never executed
       1*:   17:        if (board.empty() || board[0].empty())
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    #####:   18:            emptyFile = true;
        -:   19:        else
        1:   20:            emptyFile = false;
        -:   21:    } while (emptyFile);
        -:   22:
        -:   23:    int xInit, yInit, xGoal, yGoal;
    #####:   24:    do {
        1:   25:        cout << "Enter the x-coord (row) of starting point: ";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26:        cin >> xInit;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27:        cout << endl
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28:             << "Enter the y-coord (col) of starting point: ";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29:        cin >> yInit;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30:        cout << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31:    } while (!IsValidCoord(xInit, yInit, board, true));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -:   32:
    #####:   33:    do {
        1:   34:        cout << "Enter the x-coord (row) of goal point: ";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35:        cin >> xGoal;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36:        cout << endl
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37:             << "Enter the y-coord (col) of goal point: ";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38:        cin >> yGoal;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39:        cout << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40:    } while (!IsValidCoord(xGoal, yGoal, board, true));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -:   41:
        1:   42:    int init[2]{xInit, yInit};
        1:   43:    int goal[2]{xGoal, yGoal};
        -:   44:
        1:   45:    auto solution = Search(board, init, goal);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 never executed
        1:   46:    PrintBoard(solution);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 never executed
        1:   47:    return 0;
call    0 returned 1
        -:   48:}
